import React, { useEffect, useRef, useState } from "react";
import { motion } from "framer-motion";
import Lenis from "lenis";

const SvgComponent: React.FC = () => {
  useEffect(() => {
    const lenis = new Lenis();
    function raf(time: number) {
      lenis.raf(time);
      requestAnimationFrame(raf);
    }
    requestAnimationFrame(raf);

    const timeout = setTimeout(() => {
      document.body.style.cursor = "default";
    }, 1000);

    return () => clearTimeout(timeout);
  }, []);

  const svgRef = useRef<SVGSVGElement | null>(null);
  const [scrollY, setScrollY] = useState(0);
  const [fillOffset, setFillOffset] = useState(0);
  const [isVisible, setIsVisible] = useState(false);

  const handleScroll = () => {
    if (svgRef.current && isVisible) {
      const rect = svgRef.current.getBoundingClientRect();
      const windowHeight = window.innerHeight;

      // Check if the SVG is in the viewport
      if (rect.top >= 0 && rect.bottom <= windowHeight) {
        const offset = Math.max(0, windowHeight - rect.top);
        const progress = Math.min(offset / (windowHeight / 2.5) / 2, 1);
        setScrollY(progress);

        // Smoothly update fill offset
        setFillOffset(prevOffset => {
          const newOffset = Math.min(progress * 100, 100);
          return prevOffset + (newOffset - prevOffset) * 0.1; // Smooth transition
        });
      } else {
        setScrollY(0);
        setFillOffset(0);
      }
    }
  };

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        setIsVisible(entry.isIntersecting && entry.intersectionRatio === 1);
        if (!entry.isIntersecting) {
          setScrollY(0);
          setFillOffset(0);
        }
      },
      { threshold: 1.0 }
    );

    if (svgRef.current) {
      observer.observe(svgRef.current);
    }

    return () => {
      if (svgRef.current) {
        observer.unobserve(svgRef.current);
      }
    };
  }, [svgRef]);

  useEffect(() => {
    if (isVisible) {
      window.addEventListener("scroll", handleScroll);
    } else {
      setScrollY(0);
      setFillOffset(0);
    }

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [isVisible]);

  const strokeColor = scrollY === 1 ? "#" : "#b9d7ed"; // Same color for stroke when filled
  const strokeLinecap = scrollY === 1 ? "round" : "butt"; // Make stroke rounded when fully filled
  const shadowFilter = scrollY === 1 ? "" : "none"; // Add shadow effect

  return (
    <div className="container mx-auto flex justify-center h-auto sm:px-2 mt-[10rem]" style={{ position: "relative" }}>
      <svg
      
        ref={svgRef}
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 871.3 215.106"
        //  className="lg:w-[66rem] md:w-[66rem] sm:[100rem]"
        style={{ position: "relative", zIndex: 1 }}
      >
        <defs>
          <linearGradient id="blueGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style={{ stopColor: "rgba(0, 212, 255, 0.4)", stopOpacity: 1 }} />
            <stop offset={`${fillOffset}%`} style={{ stopColor: "rgba(138, 235, 255, 0.4)", stopOpacity: 1 }} />
            <stop offset="0%" style={{ stopColor: "transparent", stopOpacity: 1 }} />
          </linearGradient>
        </defs>

        <motion.path
          d="M 32.666 212.111 L 2.637 212.111 A 3.898 3.898 0 0 1 1.753 212.02 Q 0.293 211.679 0.293 210.06 L 0 5.715 A 3.374 3.374 0 0 1 0.117 4.787 Q 0.414 3.747 1.476 3.471 A 3.453 3.453 0 0 1 2.344 3.371 L 29.444 3.371 L 80.127 121.584 L 78.662 5.715 A 2.975 2.975 0 0 1 78.807 4.745 Q 79.262 3.425 81.142 3.373 A 5.668 5.668 0 0 1 81.299 3.371 L 111.036 3.371 Q 112.793 3.371 112.793 5.715 L 113.086 210.353 A 3.082 3.082 0 0 1 113.023 211.006 Q 112.783 212.111 111.621 212.111 L 85.254 212.111 L 33.252 101.662 L 35.45 209.767 Q 35.45 212.111 32.666 212.111 Z M 666.211 154.836 L 666.211 141.066 A 2.568 2.568 0 0 1 666.279 140.448 Q 666.48 139.642 667.276 139.49 A 2.143 2.143 0 0 1 667.676 139.455 L 701.368 139.455 A 1.189 1.189 0 0 1 701.921 139.575 Q 702.415 139.831 702.514 140.629 A 3.543 3.543 0 0 1 702.539 141.066 L 702.539 154.836 Q 702.539 164.65 709.131 171.755 A 22.661 22.661 0 0 0 715.875 176.847 A 20.584 20.584 0 0 0 724.952 178.859 A 20.63 20.63 0 0 0 740.189 172.38 A 26.902 26.902 0 0 0 740.918 171.608 A 24.182 24.182 0 0 0 747.51 154.836 Q 747.51 143.85 733.155 135.646 A 104.471 104.471 0 0 0 731.896 134.873 Q 730.161 133.822 727.848 132.498 A 303.612 303.612 0 0 0 727.076 132.058 A 390.217 390.217 0 0 0 724.078 130.372 Q 721.418 128.89 718.213 127.15 A 836.402 836.402 0 0 1 708.252 121.657 A 1162.84 1162.84 0 0 0 700.017 117.083 A 1049.459 1049.459 0 0 0 698.877 116.457 A 72.035 72.035 0 0 1 684.624 105.61 A 58.167 58.167 0 0 1 674.488 92.214 A 65.433 65.433 0 0 1 666.699 65.063 A 79.051 79.051 0 0 1 666.504 59.475 Q 666.504 42.775 674.707 29.299 A 61.83 61.83 0 0 1 696.167 8.132 A 55.563 55.563 0 0 1 724.952 0.295 A 56.352 56.352 0 0 1 754.248 8.205 Q 767.578 16.262 775.562 29.592 A 56.582 56.582 0 0 1 783.514 57.418 A 67.422 67.422 0 0 1 783.545 59.475 L 783.545 84.084 A 1.687 1.687 0 0 1 783.487 84.548 Q 783.284 85.256 782.373 85.256 L 748.682 85.256 A 1.687 1.687 0 0 1 748.218 85.198 Q 747.51 84.995 747.51 84.084 L 747.217 59.475 A 27.487 27.487 0 0 0 746.129 51.558 A 21.619 21.619 0 0 0 740.625 42.336 A 22.304 22.304 0 0 0 732.671 37.097 A 21.776 21.776 0 0 0 724.952 35.744 A 20.783 20.783 0 0 0 709.755 42.132 A 26.943 26.943 0 0 0 709.131 42.775 Q 702.539 49.807 702.539 59.475 A 38.187 38.187 0 0 0 703.202 66.784 Q 704.078 71.274 706.11 74.871 A 23.377 23.377 0 0 0 706.714 75.881 A 25.079 25.079 0 0 0 710.613 80.543 Q 714.756 84.503 721.579 88.238 A 82.632 82.632 0 0 0 722.022 88.478 Q 723.158 89.047 727.187 91.267 A 857.813 857.813 0 0 1 727.442 91.408 A 5007.089 5007.089 0 0 0 731.928 93.88 A 6766.39 6766.39 0 0 0 736.89 96.608 Q 742.09 99.465 746.338 101.735 Q 749.976 103.68 751.143 104.281 A 30.538 30.538 0 0 0 751.465 104.445 A 79.069 79.069 0 0 1 765.583 114.392 A 64.444 64.444 0 0 1 775.122 124.953 A 45.8 45.8 0 0 1 782.9 143.803 A 62.269 62.269 0 0 1 783.838 154.836 A 63.63 63.63 0 0 1 780.901 174.418 A 56.837 56.837 0 0 1 775.928 185.598 Q 767.871 199.221 754.541 207.131 Q 741.211 215.041 724.952 215.041 A 55.572 55.572 0 0 1 695.508 206.838 Q 682.178 198.635 674.195 184.938 Q 666.211 171.242 666.211 154.836 Z M 515.772 212.111 L 418.799 212.111 Q 417.627 212.111 417.627 210.646 L 417.92 4.543 A 1.687 1.687 0 0 1 417.978 4.079 Q 418.181 3.371 419.092 3.371 L 515.479 3.371 Q 516.651 3.371 516.651 4.836 L 516.651 38.381 A 1.687 1.687 0 0 1 516.593 38.845 Q 516.39 39.553 515.479 39.553 L 453.955 39.553 L 453.955 86.428 L 515.479 86.428 A 1.687 1.687 0 0 1 515.943 86.486 Q 516.651 86.689 516.651 87.6 L 516.944 121.584 A 1.687 1.687 0 0 1 516.886 122.048 Q 516.683 122.756 515.772 122.756 L 453.955 122.756 L 453.955 175.197 L 515.772 175.197 Q 516.944 175.197 516.944 176.662 L 516.944 210.939 A 1.687 1.687 0 0 1 516.886 211.403 Q 516.683 212.111 515.772 212.111 Z M 534.082 153.957 L 534.082 140.041 A 1.687 1.687 0 0 1 534.14 139.577 Q 534.343 138.869 535.254 138.869 L 569.239 138.869 A 1.189 1.189 0 0 1 569.792 138.99 Q 570.286 139.245 570.385 140.043 A 3.543 3.543 0 0 1 570.411 140.48 L 570.411 153.957 A 31.326 31.326 0 0 0 571.41 162.072 A 23.442 23.442 0 0 0 576.709 171.901 A 20.572 20.572 0 0 0 591.61 178.832 A 26.791 26.791 0 0 0 592.823 178.859 A 19.657 19.657 0 0 0 606.917 172.98 A 27.395 27.395 0 0 0 608.496 171.315 Q 615.088 163.771 615.088 153.957 L 615.088 4.836 A 1.687 1.687 0 0 1 615.146 4.372 Q 615.349 3.664 616.26 3.664 L 649.952 3.664 Q 651.123 3.664 651.123 5.129 L 651.416 153.957 A 60.314 60.314 0 0 1 643.506 184.279 Q 635.45 198.342 622.266 206.691 Q 609.082 215.041 592.823 215.041 A 59.619 59.619 0 0 1 570.282 210.82 A 56.8 56.8 0 0 1 562.793 207.131 A 56.686 56.686 0 0 1 541.773 185.231 A 62.708 62.708 0 0 1 534.203 158.227 A 75.058 75.058 0 0 1 534.082 153.957 Z M 331.348 211.818 L 277.588 212.111 Q 276.426 212.111 276.186 211.189 A 2.158 2.158 0 0 1 276.123 210.646 L 276.709 4.543 A 1.687 1.687 0 0 1 276.767 4.079 Q 276.97 3.371 277.881 3.371 L 333.985 3.078 Q 347.22 2.73 358.431 7.718 A 53.726 53.726 0 0 1 364.161 10.695 A 61.094 61.094 0 0 1 385.913 32.448 A 58.158 58.158 0 0 1 394.043 62.697 L 394.043 148.83 Q 394.043 166.115 385.694 180.471 Q 377.198 194.68 363.135 203.102 A 61.637 61.637 0 0 1 335.722 211.618 A 74.027 74.027 0 0 1 331.348 211.818 Z M 135.645 154.836 L 135.938 59.767 A 59.324 59.324 0 0 1 139.325 39.527 A 54.69 54.69 0 0 1 143.994 29.738 Q 151.905 16.262 165.381 8.132 A 55.688 55.688 0 0 1 194.678 0.002 A 57.227 57.227 0 0 1 214.316 3.308 A 52.849 52.849 0 0 1 224.121 8.059 A 61.461 61.461 0 0 1 245.288 29.665 A 58.168 58.168 0 0 1 253.272 59.638 A 68.465 68.465 0 0 1 253.272 59.767 L 253.565 154.836 Q 253.565 171.242 245.655 184.865 Q 237.598 198.635 224.268 206.838 A 55.344 55.344 0 0 1 194.678 215.041 A 55.572 55.572 0 0 1 165.235 206.838 A 63.13 63.13 0 0 1 143.775 184.938 A 57.888 57.888 0 0 1 135.645 154.836 Z M 333.985 38.967 L 313.037 39.26 L 312.744 175.197 L 331.348 175.197 A 26.255 26.255 0 0 0 342.473 172.875 A 25.763 25.763 0 0 0 350.098 167.434 Q 357.715 159.67 357.715 148.83 L 357.715 62.404 A 22.834 22.834 0 0 0 350.902 46.001 A 29.609 29.609 0 0 0 350.684 45.778 A 23.196 23.196 0 0 0 343.323 40.661 Q 339.339 38.955 334.746 38.955 A 25.145 25.145 0 0 0 333.985 38.967 Z M 217.237 154.836 L 216.944 59.767 A 26.054 26.054 0 0 0 215.375 50.592 A 23.408 23.408 0 0 0 210.645 42.922 A 20.559 20.559 0 0 0 195.651 36.055 A 26.453 26.453 0 0 0 194.678 36.037 A 21.288 21.288 0 0 0 179.168 42.463 A 26.644 26.644 0 0 0 178.858 42.775 A 22.892 22.892 0 0 0 172.325 57.866 A 30.429 30.429 0 0 0 172.266 59.767 L 172.266 154.836 Q 172.266 164.65 178.858 171.755 A 22.661 22.661 0 0 0 185.602 176.847 A 20.584 20.584 0 0 0 194.678 178.859 A 20.249 20.249 0 0 0 208.887 173.094 A 27.909 27.909 0 0 0 210.498 171.462 A 26.655 26.655 0 0 0 215.335 164.124 A 23.098 23.098 0 0 0 217.237 154.836 Z"
          fill="url(#blueGradient)"
          stroke={strokeColor}
          strokeWidth="1"
          strokeLinecap={strokeLinecap}
          filter={shadowFilter}
          initial={{ pathLength: 1 }}
          animate={{ pathLength: 1 }}
          transition={{
            repeat: Infinity,
            repeatType: "loop",
            duration: 20,
            ease: "linear",
          }}
        />
      </svg>
    </div>
  );
};

export default SvgComponent;
